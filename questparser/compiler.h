#ifndef QP_COMPILER
#define QP_COMPILER

#include "../datastructures/array.h"
#include "ast.h"
#include "../utf8strings/utf8strings.h"

/**
 * Structure representing an object in the Tn language.
 */
struct Tn_Object;

/**
 * Enumeration of bytecode instruction kinds.
 */
typedef enum {
    I_LOAD_STRING,
    I_LOAD_VARIABLE,
    I_BINARY_ADD,
    I_BINARY_SUB,
    I_BINARY_MUL,
    I_CMP_EQUAL,
    I_CMP_NEQUAL,
    I_CMP_GE,
    I_CMP_LE,
    I_CMP_GT,
    I_CMP_LT,
    I_JUMP_IF_FALSE,
    I_JUMP,
    I_CALL,
    I_METHOD_CALL,
    I_STORE,
    I_POP_TOP,
    I_DUP_TOP,
    I_LOAD_ATTR,
    I_STORE_ATTR,
    I_LOAD_NUMBER,
    I_LOAD_METHOD
} BytecodeInstructionKind;

/**
 * Structure representing a bytecode instruction.
 */
typedef struct {
    BytecodeInstructionKind kind; /**< Kind of the bytecode instruction. */
    int64_t number; /**< Number associated with the bytecode instruction. */
} BytecodeInstruction;

/**
 * Structure representing bytecode.
 */
typedef struct {
    ArrayList* strings; /**< ArrayList of strings used in the bytecode. */
    ArrayList* instructions; /**< ArrayList of BytecodeInstruction objects. */
    ArrayList* varnames; /**< ArrayList of variable names used in the bytecode. */
    size_t varcount; /**< Number of variables in the bytecode. */
    struct Tn_Object* contextObject; /**< Pointer to the context object of the bytecode. */
} Bytecode;

/**
 * Structure representing a compiler.
 */
typedef struct {
    size_t counter; /**< Counter used for generating bytecode instructions. */
    size_t varcount; /**< Number of variables in the compiler. */
    ArrayList* strings; /**< ArrayList of strings used in the compiler. */
    ArrayList* varnames; /**< ArrayList of variable names used in the compiler. */
    HashMap* variables; /**< HashMap of variables in the compiler. */
    ArrayList* instructions; /**< ArrayList of bytecode instructions generated by the compiler. */
} Compiler;

/**
 * Compiles the provided instructions into bytecode.
 * @param instructions A pointer to the ArrayList containing instructions.
 * @return A pointer to the generated bytecode.
 */
Bytecode* compile(ArrayList* instructions);

/**
 * Creates a new bytecode instruction.
 * @param kind The kind of the bytecode instruction.
 * @param number The number associated with the bytecode instruction.
 * @return A pointer to the newly created bytecode instruction.
 */
BytecodeInstruction* BytecodeInstruction_new(BytecodeInstructionKind kind, int64_t number);

/**
 * Deletes the bytecode.
 * @param bytecode A pointer to the bytecode to be deleted.
 */
void Bytecode_delete(Bytecode* bytecode);

/**
 * Deletes the bytecode instruction.
 * @param instruction A pointer to the bytecode instruction to be deleted.
 */
void BytecodeInstruction_delete(BytecodeInstruction* instruction);

/**
 * Deletes the compiler and frees associated resources.
 * @param compiler A pointer to the compiler to be deleted.
 */
void Compiler_delete(Compiler* compiler);

/**
 * Macro for emitting a bytecode instruction.
 * @param compiler A pointer to the compiler.
 * @param instruction A pointer to the bytecode instruction to be emitted.
 */
void EMIT(Compiler* compiler, BytecodeInstruction* instruction);

/**
 * Prints the bytecode.
 * @param bytecode A pointer to the bytecode to be printed.
 */
void Bytecode_print(Bytecode* bytecode);

/**
 * Sets the context object of the bytecode.
 * @param bytecode A pointer to the bytecode.
 * @param object A pointer to the context object.
 */
void Bytecode_setContextObject(Bytecode* bytecode, struct Tn_Object* object);

/**
 * Gets a string representation of a bytecode instruction kind.
 * @param kind The bytecode instruction kind.
 * @return A string representation of the bytecode instruction kind.
 */
const char* BytecodeInstructionKind_repr(BytecodeInstructionKind kind);


void _compilerStringLitteral(Compiler* compiler, UTF8_String* string);

void _compileBinaryExpression(Compiler* compiler, AST_Expression* expression);

void _compileExpression(Compiler* compiler, AST_Expression* expression);

void _compileExpressionStatement(Compiler* compiler, AST_Statement* instruction);

void _compileInstruction(Compiler* compiler, AST_Statement* instruction);

void _compileInstructions(Compiler* compiler, ArrayList* instructions);

#endif